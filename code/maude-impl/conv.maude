in structs

fmod AST-CONVERSION-IN is
    pr AST .
    pr EPEG .
    sort ConvReturn .
    op _|%|_ : Graph Node -> ConvReturn [ctor prec 40] .
    op graphPart : ConvReturn -> Graph .
    op nodePart : ConvReturn -> Node .
    op convert : System -> EPeg .
    op addConv : System Graph -> ConvReturn .
    op addConv : Rule Graph -> ConvReturn [ditto] .
    op addConv : Var Graph -> ConvReturn .
    op addConv : Term Graph -> ConvReturn [ditto] .
    op addConvAux : Term Graph Nat -> ConvReturn .
    op trivClasses : Graph -> EquivClasses .
    vars N N0 N1 N2 : Node .
    var E : Edge .
    vars G G0 G1 : Graph .
    var S : System .
    var R : Rule .
    var EQ : Equation .
    vars T T0 T1 : Term .
    var Q : Qid .
    vars I K : Nat .
    var TL : TermList .
    var O : Operation .
    var V : Var .
    eq graphPart(G |%| N) = G .
    eq nodePart(G |%| N) = N .
    ceq convert(S) = G *! trivClasses(G) if G := graphPart(addConv(S, empty)) .
    eq addConv(emptySys, (I @ sysD through nothing to N ; G)) = (I @ sysD into N ; G) |%| I @ sysD .
    eq addConv(emptySys, empty) = empty |%| 0 @ sysD .
    ceq addConv((R ; S), G) = addConv(S, G0)
      if G0 |%| N := addConv(R, G) .
    eq addConv((EQ ; S), G) = addConv(S, G) .
    ceq addConv((T0 ==> T1), (I @ sysD through nothing to N2 ; G)) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; I @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, (I @ sysD into N2 ; G)) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ anonRuleD .
    ceq addConv((T0 ==> T1), empty) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; 0 @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, empty) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ anonRuleD .
    ceq addConv((T0 =[ Q ]=> T1), (I @ sysD through nothing to N2 ; G)) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; I @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, (I @ sysD into N2 ; G)) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ namedRuleD(Q) .
    ceq addConv((T0 =[ Q ]=> T1), empty) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; 0 @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, empty) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ namedRuleD(Q) .
    eq addConv((O ! TL), G) = addConvAux((O ! TL), G, 0) .
    eq addConvAux((oper(Q) ! nil), G, K) = G |%| nextId(G) @ operD(Q) .
    ceq addConvAux((oper(Q) ! (T , TL)), G, K) = G1 ; N through K to N0 |%| N
      if G0 |%| N0 := addConv(T, G) /\ G1 |%| N := addConvAux((oper(Q) ! TL), G0, K + 1) .
    eq addConv(var(Q), G) = G |%| nextId(G) @ varD(Q) .
endfm

fmod AST-CONVERSION-OUT is
    pr AST .
    pr EPEG .
endfm
