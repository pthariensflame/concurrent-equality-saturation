in structs

fmod AST-CONVERSION-IN is
    pr AST .
    pr EPEG .
    sort ConvReturn .
    op _|%|_ : Graph Node -> ConvReturn [ctor prec 42] .
    op graphPart : ConvReturn -> Graph .
    op nodePart : ConvReturn -> Node .
    op convert : System -> EPeg .
    op addConv : System Graph -> ConvReturn .
    op addConv : Rule Graph -> ConvReturn [ditto] .
    op addConv : Var Graph -> ConvReturn .
    op addConv : Term Graph -> ConvReturn [ditto] .
    op addConvAux : Term Graph Nat -> ConvReturn .
    op trivClasses : Graph -> EquivClasses .
    vars N N0 N1 N2 : Node .
    vars ND0 ND1 : NodeData .
    var E : Edge .
    var ED : EdgeData .
    vars G G0 G1 : Graph .
    var S : System .
    var R : Rule .
    var EQ : Equation .
    vars T T0 T1 : Term .
    var Q : Qid .
    vars I J K : Nat .
    var TL : TermList .
    var O : Operation .
    var V : Var .
    var ECS : EquivClasses .
    eq graphPart(G |%| N) = G .
    eq nodePart(G |%| N) = N .
    ceq convert(S) = G *! trivClasses(G) if G := graphPart(addConv(S, empty)) .
    eq addConv(emptySys, (I @ sysD through nothing to N ; G)) = (I @ sysD into N ; G) |%| I @ sysD .
    eq addConv(emptySys, empty) = empty |%| 0 @ sysD .
    ceq addConv((R ; S), G) = addConv(S, G0)
      if G0 |%| N := addConv(R, G) .
    eq addConv((EQ ; S), G) = addConv(S, G) .
    ceq addConv((T0 ==> T1), (I @ sysD through nothing to N2 ; G)) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; I @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, (I @ sysD into N2 ; G)) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ anonRuleD .
    ceq addConv((T0 ==> T1), empty) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; 0 @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, empty) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ anonRuleD .
    ceq addConv((T0 =[ Q ]=> T1), (I @ sysD through nothing to N2 ; G)) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; I @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, (I @ sysD into N2 ; G)) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ namedRuleD(Q) .
    ceq addConv((T0 =[ Q ]=> T1), empty) = (G1 ; N through 0 to N0 ; N through 1 to N1 ; 0 @ sysD into N) |%| N
      if G0 |%| N0 := addConv(T0, empty) /\ G1 |%| N1 := addConv(T1, G0) /\ N := nextId(G1) @ namedRuleD(Q) .
    eq addConv((O ! TL), G) = addConvAux((O ! TL), G, 0) .
    eq addConvAux((oper(Q) ! nil), G, K) = G |%| nextId(G) @ operD(Q) .
    ceq addConvAux((oper(Q) ! (T , TL)), G, K) = G1 ; N through K to N0 |%| N
      if G0 |%| N0 := addConv(T, G) /\ G1 |%| N := addConvAux((oper(Q) ! TL), G0, K + 1) .
    eq addConv(var(Q), G) = G |%| nextId(G) @ varD(Q) .
    ceq trivClasses(E) = N0 , N1
      if N0 through ED to N1 := E .
    ceq trivClasses(E ; G) = N0 , N1 , ECS
      if N0 through ED to N1 := E /\ ECS := trivClasses(G) .
endfm

mod AST-CONVERSION-OUT is
    pr AST .
    pr EPEG .
    sorts NodeList .
    subsorts Node < NodeList .
    op extractSystem : EPeg Node -> System [frozen] .
    op extractSystemAux : EPeg Node NodeList -> System [frozen] .
    op extractRule : EPeg Node -> Rule [frozen] .
    op extractTerm : EPeg Node -> Term [frozen] .
    op extractTermList : EPeg NodeList -> TermList [frozen] .
    op null : -> NodeList [ctor] .
    op _~_ : NodeList NodeList -> NodeList [ctor assoc id: null prec 44] .
    op extract : EPeg -> System [frozen] .
    var EP : EPeg .
    var G : Graph .
    var ECS : EquivClasses .
    var EC : EquivClass .
    vars I I0 I1 J J0 J1 K : Nat .
    vars N N0 N1 : Node .
    vars NL NL0 : NodeList .
    vars ND ND0 ND1 : NodeData .
    vars SY : System .
    vars R R0 R1 : Rule .
    vars T T0 T1 : Term .
    var TL : TermList .
    var Q : Qid .
    eq extract(EP) = extractSystem(EP, 0 @ sysD) .
    rl [extEquivSubst] : extractSystem(G *! ((I0 @ ND0) (I1 @ ND1) EC , ECS), I0 @ ND0) => extractSystem(G *! ((I0 @ ND0) (I1 @ ND1) EC , ECS), I1 @ ND1) .
    rl [extEquivSubst] : extractSystem(G *! ((I0 @ ND0) (I1 @ ND1) , ECS), I0 @ ND0) => extractSystem(G *! ((I0 @ ND0) (I1 @ ND1) , ECS), I1 @ ND1) .
    rl [extEquivSubst] : extractSystem(G *! ((I0 @ ND0) (I1 @ ND1) EC), I0 @ ND0) => extractSystem(G *! ((I0 @ ND0) (I1 @ ND1) EC), I1 @ ND1) .
    rl [extEquivSubst] : extractSystem(G *! ((I0 @ ND0) (I1 @ ND1)), I0 @ ND0) => extractSystem(G *! ((I0 @ ND0) (I1 @ ND1)), I1 @ ND1) .
    rl [extEquivSubst] : extractRule(G *! ((I0 @ ND0) (I1 @ ND1) EC , ECS), I0 @ ND0) => extractRule(G *! ((I0 @ ND0) (I1 @ ND1) EC , ECS), I1 @ ND1) .
    rl [extEquivSubst] : extractRule(G *! ((I0 @ ND0) (I1 @ ND1) , ECS), I0 @ ND0) => extractRule(G *! ((I0 @ ND0) (I1 @ ND1) , ECS), I1 @ ND1) .
    rl [extEquivSubst] : extractRule(G *! ((I0 @ ND0) (I1 @ ND1) EC), I0 @ ND0) => extractRule(G *! ((I0 @ ND0) (I1 @ ND1) EC), I1 @ ND1) .
    rl [extEquivSubst] : extractRule(G *! ((I0 @ ND0) (I1 @ ND1)), I0 @ ND0) => extractRule(G *! ((I0 @ ND0) (I1 @ ND1)), I1 @ ND1) .
    rl [extEquivSubst] : extractTerm(G *! ((I0 @ ND0) (I1 @ ND1) EC , ECS), I0 @ ND0) => extractTerm(G *! ((I0 @ ND0) (I1 @ ND1) EC , ECS), I1 @ ND1) .
    rl [extEquivSubst] : extractTerm(G *! ((I0 @ ND0) (I1 @ ND1) , ECS), I0 @ ND0) => extractTerm(G *! ((I0 @ ND0) (I1 @ ND1) , ECS), I1 @ ND1) .
    rl [extEquivSubst] : extractTerm(G *! ((I0 @ ND0) (I1 @ ND1) EC), I0 @ ND0) => extractTerm(G *! ((I0 @ ND0) (I1 @ ND1) EC), I1 @ ND1) .
    rl [extEquivSubst] : extractTerm(G *! ((I0 @ ND0) (I1 @ ND1)), I0 @ ND0) => extractTerm(G *! ((I0 @ ND0) (I1 @ ND1)), I1 @ ND1) .
    rl [extSystem] : extractSystem(G *! ECS, I @ sysD) => extractSystemAux(G *! ECS, I @ sysD, childrenOf(G, I @ sysD)) .
    rl [extSystemAux] : extractSystemAux(G *! ECS, I @ sysD, null) => emptySys .
    crl [extSystemAux] : extractSystemAux(G *! ECS, I @ sysD, NL) => R ; SY
      if N ~ NL0 := NL /\ extractRule(G *! ECS, N) => R /\ extractSystemAux(G *! ECS, I @ sysD, NL0) => SY .
    crl [extRule] : extractRule(G *! ECS, I @ anonRuleD) => T0 ==> T1
      if N0 ~ N1 := childrenOf(G, I @ anonRuleD) /\ extractTerm(G *! ECS, N0) => T0 /\ extractTerm(G *! ECS, N1) => T1 .
    crl [extRule] : extractRule(G *! ECS, I @ namedRuleD(Q)) => T0 =[ Q ]=> T1
      if N0 ~ N1 := childrenOf(G, I @ namedRuleD(Q)) /\ extractTerm(G *! ECS, N0) => T0 /\ extractTerm(G *! ECS, N1) => T1 .
    rl [extTerm] : extractTerm(G *! ECS, I @ varD(Q)) => var(Q) .
    crl [extTerm] : extractTerm(G *! ECS, I @ operD(Q)) => oper(Q) ! TL
      if extractTermList(G *! ECS, childrenOf(G, I @ operD(Q))) => TL .
    rl [extTermList] : extractTermList(G *! ECS, null) => nil .
    crl [extTermList] : extractTermList(G *! ECS, NL) => T , TL
      if N ~ NL0 := NL /\ extractTerm(G *! ECS, N) => T /\ extractTermList(G *! ECS, NL0) => TL .
endm
