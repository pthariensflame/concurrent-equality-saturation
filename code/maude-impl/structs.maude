fmod AST is
    pr QID .
    sorts System Rule Equation Operation Var Term TermList .
    subsorts Rule Equation < System .
    subsorts Var < Term < TermList .
    op emptySys : -> System [ctor] .
    op _;_ : System System -> System [ctor assoc comm id: emptySys prec 36] .
    op _===_ : Term Term -> Equation [ctor prec 34] .
    op _==>_ : Term Term -> Rule [ctor prec 34] .
    op _=[_]=>_ : Term Qid Term -> Rule [ctor prec 34] .
    op nil : -> TermList [ctor] .
    op _,_ : TermList TermList -> TermList [ctor assoc id: nil prec 30] .
    op var : Qid -> Var [ctor] .
    op oper : Qid -> Operation [ctor] .
    op _!_ : Operation TermList -> Term [ctor prec 32] .
    op equationsOf : System -> System .
    op rulesOf : System -> System .
    var R : Rule .
    var E : Equation .
    var S : System .
    eq R ; R = R .
    eq E ; E = E .
    eq equationsOf(emptySys) = emptySys .
    eq equationsOf(R ; S) = equationsOf(S) .
    eq equationsOf(E ; S) = E ; equationsOf(S) .
    eq rulesOf(emptySys) = emptySys .
    eq rulesOf(R ; S) = R ; rulesOf(S) .
    eq rulesOf(E ; S) = rulesOf(S) .
endfm

view System from TRIV to AST is
    sort Elt to System .
endv

view Rule from TRIV to AST is
    sort Elt to Rule .
endv

view Equation from TRIV to AST is
    sort Elt to Equation .
endv

view Operation from TRIV to AST is
    sort Elt to Operation .
endv

view Var from TRIV to AST is
    sort Elt to Var .
endv

view Term from TRIV to AST is
    sort Elt to Term .
endv

view TermList from TRIV to AST is
    sort Elt to TermList .
endv

fth GRAPH-SPEC is
    sorts NodeData EdgeData .
endfth

fmod GRAPH{S :: GRAPH-SPEC} is
    pr NAT .
    sorts Node{S} Edge{S} Graph{S} .
    subsorts Edge{S} < Graph{S} .
    op _@_ : Nat S$NodeData -> Node{S} [prec 30] .
    op _through_to_ : Node{S} S$EdgeData Node{S} -> Edge{S} [ctor prec 34] .
    op empty : -> Graph{S} [ctor] .
    op _;_ : Graph{S} Graph{S} -> Graph{S} [ctor assoc comm id: empty prec 36] .
    ops nextId nextIdAux : Graph{S} -> Nat .
    vars I0 I1 : Nat .
    vars ND0 ND1 : S$NodeData .
    vars N0 N1 : Node{S} .
    var ED : S$EdgeData .
    var E : Edge{S} .
    var G : Graph{S} .
    eq E ; E = E .
    eq nextIdAux(empty) = 0 .
    eq nextIdAux(((I0 @ ND0) through ED to (I1 @ ND1)) ; G) = max(max(I0, I1), nextId(G)) .
    eq nextId(G) = nextIdAux(G) + 1 .
endfm

fmod PEG-SPEC is
    pr NAT . pr QID .
    sorts SystemD RuleD CompositionD OperationD VarD NodeData Nothing EdgeData .
    subsorts SystemD RuleD CompositionD OperationD VarD < NodeData .
    subsorts Nothing Nat < EdgeData .
    op sysD : -> SystemD [ctor] .
    op anonRuleD : -> RuleD [ctor] .
    op namedRuleD : Qid -> RuleD [ctor] .
    op anonCompD : -> CompositionD [ctor] .
    op namedCompD : Qid -> CompositionD [ctor] .
    op operD : Qid -> OperationD [ctor] .
    op varD : Qid -> OperationD [ctor] .
    op nothing : -> Nothing [ctor] .
endfm

view PEGSpec from GRAPH-SPEC to PEG-SPEC is
endv

fmod PEG is
    pr PEG-SPEC + GRAPH{PEGSpec} * (
        sort Node{PEGSpec} to Node,
        sort Edge{PEGSpec} to Edge,
        sort Graph{PEGSpec} to Graph
    ) .
    op _into_ : Node Node -> Edge [prec 34] .
    vars N0 N1 : Node .
    eq N0 into N1 = N0 through nothing to N1 .
endfm

fmod EPEG is
    pr PEG .
    sorts EPeg EquivClass EquivClasses .
    subsorts Node < EquivClass < EquivClasses .
    op __ : EquivClass EquivClass -> EquivClasses [ctor assoc comm prec 38] .
    op _,_ : EquivClasses EquivClasses -> EquivClasses [ctor assoc comm prec 40] .
    op _*!_ : Graph EquivClasses -> EPeg [ctor prec 42] .
    var N : Node .
    var EC : EquivClass .
    var ECS : EquivClasses .
    eq N N = N .
    eq EC , EC = EC .
endfm
