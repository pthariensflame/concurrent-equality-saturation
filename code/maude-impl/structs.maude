fmod AST is
    pr QID .
    sorts System Rule Equation Operation Var Term TermList .
    subsorts Rule Equation < System .
    subsorts Var < Term < TermList .
    op emptySys : -> System [ctor] .
    op _;_ : System System -> System [ctor assoc comm id: emptySys prec 36] .
    op _===_ : Term Term -> Equation [ctor prec 34] .
    op _==>_ : Term Term -> Rule [ctor prec 34] .
    op _=[_]=>_ : Term Qid Term -> Rule [ctor prec 34] .
    op nil : -> TermList [ctor] .
    op _,_ : TermList TermList -> TermList [ctor assoc id: nil prec 30] .
    op var : Qid -> Var [ctor] .
    op oper : Qid -> Operation [ctor] .
    op _!_ : Operation TermList -> Term [ctor prec 32] .
    eq R::Rule ; R::Rule = R::Rule .
    eq E::Equation ; E::Equation = E::Equation .
endfm

fth GRAPH-SPEC is
    sorts NodeData EdgeData .
endfth

fmod EGRAPH{S :: GRAPH-SPEC} is
    pr NAT .
    sorts Node{S} Edge{S} Graph{S} ENode{S} EEdge{S} EGraph{S} .
    subsorts Node{S} < ENode{S} .
    subsorts Edge{S} < Graph{S} EEdge{S} < EGraph{S} .
    op _@_ : Nat S$NodeData -> Node{S} [prec 30] .
    op _through_to_ : ENode{S} S$EdgeData ENode{S} -> EEdge{S} [ctor prec 34] .
    op _through_to_ : Node{S} S$EdgeData Node{S} -> Edge{S} [ctor ditto] .
    op empty : -> Graph{S} [ctor] .
    op _;_ : EGraph{S} EGraph{S} -> EGraph{S} [ctor assoc comm id: empty prec 36] .
    op _;_ : Graph{S} Graph{S} -> Graph{S} [ctor ditto] .
    op _,_ : ENode{S} ENode{S} -> ENode{S} [ctor assoc comm prec 32] .
    ops nextId nextIdAux : EGraph{S} -> Nat .
    vars I0 I1 : Nat .
    vars ND0 ND1 : S$NodeData .
    vars N0 N1 : ENode{S} .
    var ED : S$EdgeData .
    var E : EEdge{S} .
    var G : EGraph{S} .
    eq E ; E = E .
    eq N0 , N0 = N0 .
    eq nextIdAux(empty) = 0 .
    eq nextIdAux(((I0 @ ND0) through ED to (I1 @ ND1)) ; G) = max(max(I0, I1), nextId(G)) .
    eq nextIdAux((((I0 @ ND0) , N0) through ED to ((I1 @ ND1) , N1)) ; G) = max(max(I0, I1), nextId((N0 through ED to N1) ; G)) .
    eq nextId(G) = nextIdAux(G) + 1 .
endfm

fmod PEG-SPEC is
    pr NAT . pr QID .
    sorts SystemD RuleD CompositionD OperationD VarD NodeData Nothing EdgeData .
    subsorts SystemD RuleD CompositionD OperationD VarD < NodeData .
    subsorts Nothing Nat < EdgeData .
    op sysD : -> SystemD [ctor] .
    op anonRuleD : -> RuleD [ctor] .
    op namedRuleD : Qid -> RuleD [ctor] .
    op anonCompD : -> CompositionD [ctor] .
    op namedCompD : Qid -> CompositionD [ctor] .
    op operD : Qid -> OperationD [ctor] .
    op varD : Qid -> OperationD [ctor] .
    op nothing : -> Nothing [ctor] .
endfm

view PEGSpec from GRAPH-SPEC to PEG-SPEC is
endv

fmod EPEG is
    pr PEG-SPEC + EGRAPH{PEGSpec} * (
        sort Node{PEGSpec} to Node,
        sort Edge{PEGSpec} to Edge,
        sort Graph{PEGSpec} to Graph,
        sort ENode{PEGSpec} to ENode,
        sort EEdge{PEGSpec} to EEdge,
        sort EGraph{PEGSpec} to EGraph
    ) .
    op _into_ : ENode ENode -> EEdge [prec 34] .
    op _into_ : Node Node -> Edge [ditto] .
    vars N0 N1 : Node .
    vars EN0 EN1 : ENode .
    eq N0 into N1 = N0 through nothing to N1 .
    eq EN0 into EN1 = EN0 through nothing to EN1 .
endfm
